---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: rpm-build
  name: rpmbuild
  labels:
    build.appstudio.redhat.com/multi-platform-required: "true"
spec:
  description: |-
    RPM Build task.
  params:
    - description: Package name being built
      name: package-name
      type: string
    - description: The platform/architecture we build for
      name: PLATFORM
      type: string
    - description: The branch name we build against/from
      name: target-branch
      type: string
  steps:
    - name: mock-build
      image: "quay.io/redhat-appstudio/multi-platform-runner:\
              01c7670e81d5120347cf0ad13372742489985e5f@sha256:\
              246adeaaba600e207131d63a7f706cffdcdc37d8f600c56187123ec62823ff44"
      script: |
        #!/bin/bash
        set -ex
        mkdir -p ~/.ssh
        if [ -e "/ssh/error" ]; then
          #no server could be provisioned
          cat /ssh/error
          exit 1
        elif [ -e "/ssh/otp" ]; then
         curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
         echo "" >> ~/.ssh/id_rsa
        else
          cp /ssh/id_rsa ~/.ssh
        fi

        arch=x86_64
        case $(params.PLATFORM) in
          *s390x) arch=s390x ;;
          *ppc64le) arch=ppc64le ;;
          *arm64) arch=aarch64 ;;
        esac

        chmod 0400 ~/.ssh/id_rsa
        export SSH_HOST=$(cat /ssh/host)
        export HOMEDIR=$(cat /ssh/user-dir)
        export SSH_ARGS="-o StrictHostKeyChecking=no"
        remote_cmd() { ssh $SSH_ARGS "$SSH_HOST" "$@" ; }
        send() { rsync -rva "$1" "$SSH_HOST:$2" ; }
        receive() { rsync -rva "$SSH_HOST:$1" "$2" ; }

        workdir=$(workspaces.sources.path)

        remote_cmd echo "Hello from the other side!"
        send "$workdir/source/" "$HOMEDIR/source"

        remote_cmd mkdir "$HOMEDIR/results"

        mock_img=quay.io/redhat-user-workloads/rhel-on-konflux-team-tenant/tooling/mock-container:6fbbd2c33f2a2ef431d19215742e6e5a11f3b07d
        remote_cmd podman pull "$mock_img"
        remote_cmd podman run -v "$HOMEDIR/source:/source" \
                              -v "$HOMEDIR/results:/results" \
                              --privileged --rm -ti "$mock_img" \
            mock -r "$(params.target-branch)-$arch" \
                --spec /source/$(params.package-name).spec \
                --sources /source --resultdir /results

        resultdir=$workdir/results/$arch
        mkdir -p "$resultdir"
        receive "$HOMEDIR/results/" "$resultdir"

      volumeMounts:
        - mountPath: /ssh
          name: ssh
          readOnly: true

  volumes:
    - name: ssh
      secret:
        optional: false
        secretName: multi-platform-ssh-$(context.taskRun.name)

  workspaces:
    - name: sources
